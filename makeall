#!/bin/bash

# Rebuild and install all libyui related packages (including yast)
# !! Use a scratch machine or a container for this !!

# Run from a git superdir, containing checkouts of all yui related repos

set -eu
set -x

makerepo() {
    # git checkout master

    test -f CMakeLists.txt || ./bootstrap.sh
    if $CLEAN; then
        rm -rf build
    fi
    mkdir -p build; cd build
    cmake -DCMAKE_BUILD_TYPE=RELWITHDEBINFO ..
    make -j`nproc`
    if $INSTALL; then
        $SUDO make install
    fi
}

LIBYUI_REPOS='
libyui
libyui-rest-api
libyui-ncurses          libyui-qt
                        libyui-qt-graph
libyui-ncurses-pkg      libyui-qt-pkg
libyui-ncurses-rest-api libyui-qt-rest-api
'

# libyui-bindings ruby-ui
# LIBYUI_REPOS="$LIBYUI_REPOS libyui-gtk libyui-gtk-pkg"

MGA_REPOS='libyui-mga
libyui-mga-gtk libyui-mga-ncurses libyui-mga-qt'

#REPOS="libyui  libyui-ncurses  libyui-ncurses-pkg libyui-qt libyui-qt-pkg
#REPOS=libyui-qt

PARSED=$(getopt -o 'ci' --long 'clean,install' -- "$@")
eval set -- "$PARSED"
unset PARSED

CLEAN=false
INSTALL=false
SUDO=""

while true; do
    case "$1" in
        '-c'|'--clean')
            CLEAN=true
            shift
            ;;
        '-i'|'--install')
            INSTALL=true
            shift
            ;;
        '-s'|'--sudo')
            SUDO=sudo
            shift
            ;;
        '-b'|'--b-long')
            echo "Option b, argument '$2'"
            shift 2
            ;;
        '--')
            shift
            break
            ;;
        *)
            echo 'Internal error!' >&2
            exit 1
            ;;
    esac
done


for i in $LIBYUI_REPOS; do
    echo == $i ==
    pushd $i #> /dev/null
    makerepo
    popd #> /dev/null
done
